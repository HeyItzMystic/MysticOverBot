String id = event.getGuild().getId();
        File file = new File("C:\\Users\\Dieser PC\\MysticOverBot\\Prefix\\" + id + ".json");
        if (file.exists()) {
            try {

                JSONParser json = new JSONParser();
                    FileReader reader = new FileReader(file);
                        Object object = json.parse(reader);
                        JSONObject obj = (JSONObject)object;
                        Constants.PREFIX = obj.get("prefix").toString();          
                
                
            }
            catch (FileNotFoundException e) {
                Constants.PREFIX = "o!";
                e.printStackTrace();
            }
            catch (IOException e) {
                Constants.PREFIX = "o!";
                e.printStackTrace();
            }
            catch (ParseException e) {
                Constants.PREFIX = "o!";
                e.printStackTrace();
            }
        } else {
            Constants.PREFIX = "o!";
        }
        
        
        
 
 
 /*
 * Decompiled with CFR 0.145.
 */
package me.mysticoverlord.mysticoverbot;


import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;

import me.duncte123.botcommons.messaging.EmbedUtils;
import me.mysticoverlord.mysticoverbot.CommandManager;
import me.mysticoverlord.mysticoverbot.Constants;
import me.mysticoverlord.mysticoverbot.config.Config;
import me.mysticoverlord.mysticoverbot.database.SQLiteDataSource;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.OnlineStatus;
import net.dv8tion.jda.api.entities.*;
import net.dv8tion.jda.api.events.ReadyEvent;
import net.dv8tion.jda.api.events.guild.GuildJoinEvent;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;
import net.dv8tion.jda.api.events.message.guild.GuildMessageReceivedEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Listener
extends ListenerAdapter {
    CommandManager manager;
    Logger logger = LoggerFactory.getLogger(Listener.class);
    

    public Listener(CommandManager manager) {
        this.manager = manager;
    }

    @SuppressWarnings({ "unchecked" })
	@Override
    public void onReady(ReadyEvent event) {
    	
    	event.getJDA().getPresence().setStatus(OnlineStatus.ONLINE); 	
    	File file = new File("C:\\Users\\Dieser PC\\MysticOverBot\\isUpdated.json");
		try {
			FileReader filer = new FileReader(file);
			JSONParser json = new JSONParser();
			Object object1 = json.parse(filer);
            JSONObject obj = (JSONObject)object1;
            
            String bool = obj.get("boolean").toString();
            
            if (bool.equals("true")) {
            	event.getJDA().getPresence().setActivity(Activity.playing("Update Initializating..."));
            	try {
					TimeUnit.SECONDS.sleep(1);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
            	logger.info("Update intitializing...");
            	FileWriter filew = new FileWriter(file);
            		obj = new JSONObject();
            		obj.put("boolean", "false");

                    filew.write(obj.toJSONString());
                    filew.close();
            		
            		event.getJDA().getUsers().forEach((user) -> {
            			try {
							FileWriter filewriter = new FileWriter("C:\\Users\\Dieser PC\\MysticOverBot\\Updatelog\\" + user.getId() + ".json");
							JSONObject o = new JSONObject();
							o.put("boolean", "true");
							filewriter.write(o.toJSONString());
							filewriter.close();
							
            			} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
            			
            		});

            		logger.info("Update initialized!");
            		event.getJDA().shutdown();
            		System.exit(0);
            	}
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
        logger.info(String.format("Logged in as %#s\n", event.getJDA().getSelfUser()));
        Timer timer = new Timer();
        timer.schedule(new TimerTask(){

            @Override
            public void run() {
            	long count = event.getGuildTotalCount();
                count = count == event.getJDA().getGuilds().size() ? count : count < event.getJDA().getGuilds().size() ? event.getJDA().getGuilds().size() : count;
                event.getJDA().getPresence().setActivity(Activity.watching(String.valueOf(count) + " Servers | o!help"));
                Constants.api.setStats(event.getJDA().getGuilds().size());
                try {
                    TimeUnit.SECONDS.sleep(30L);
                }
                catch (InterruptedException e) {
                    e.printStackTrace();
                }
                event.getJDA().getPresence().setActivity(Activity.watching(Constants.VERSION));
                Constants.api.setStats(event.getJDA().getGuilds().size());
            }
        }, 0L, 60000L);     
    }

    @Override
    public void onGuildJoin(GuildJoinEvent event) throws NullPointerException{
            EmbedBuilder builder = EmbedUtils.defaultEmbed()
            		.setThumbnail(event.getJDA().getSelfUser()
            		.getEffectiveAvatarUrl())
            		.setTitle("Greetings!")
            		.setDescription("I am MysticOverBot!\n\n"
            				+ "To get started, send ``o!help`` for a list of commands!\n\n"
            				+ "If you have any suggestions to make me better send ``o!suggest <suggestion>``!")
            		.addField("Official Hideout", "https://discord.gg/kUVCU7z", true)
            		.addField("Creator", "MysticOverlord#7697", true)
            		.setFooter("Enjoy the Commands!", null);
            
            if (event.getGuild().getSystemChannel() != null && event.getGuild().getSystemChannel().canTalk()) {
                event.getGuild().getSystemChannel().sendMessage(builder.build()).queue();
                return;
            } else if (event.getGuild().getDefaultChannel() != null && event.getGuild().getDefaultChannel().canTalk()){
                event.getGuild().getDefaultChannel().sendMessage(builder.build()).queue();
                return;
            } else {
            	int x = 0;
            	while (x <= event.getGuild().getTextChannels().size()) {
            		if (event.getGuild().getTextChannels().get(x).canTalk()) {
                		event.getGuild().getTextChannels().get(x).sendMessage(builder.build()).queue();
            			break;
            	}
            		x += 1;
            }

        	}
            

    }
    

    @Override
    public void onMessageReceived(MessageReceivedEvent event)  {	
        User author = event.getAuthor();
        Message message = event.getMessage();
        String content = message.getContentDisplay();
        if (event.isFromType(ChannelType.TEXT)) {
            Guild guild = event.getGuild();
            TextChannel textChannel = event.getTextChannel();
            logger.info(String.format("(%s)[%s]<%#s>: %s\n", guild.getName(), textChannel.getName(), author, content));           
        } else if (event.isFromType(ChannelType.PRIVATE)) {
            logger.info(String.format("[PRIV]<%#s>: %s", author, content));
        }
    }

    @Override
    public void onGuildMessageReceived(GuildMessageReceivedEvent event) {
        String raw = event.getMessage().getContentRaw();     

        
        if (raw.equalsIgnoreCase(String.valueOf(Constants.PREFIX) + "shutdown") && event.getAuthor().getIdLong() == 394066807926947850L) {
            event.getChannel().sendMessage("shutting down...").queue();
            this.shutdown(event.getJDA());
            return;
        }
        String id = event.getGuild().getId();

        Constants.PREFIX = getPrefix(id);
        
        if (!event.getMessage().isWebhookMessage() && !event.getAuthor().isBot() && (raw.startsWith(Constants.PREFIX) || raw.toLowerCase().startsWith("o!"))) {
            this.manager.handleCommand(event);
        }
    }

    private void shutdown(JDA jda) {
        jda.shutdown();
        
        System.exit(0);
    }
    

    private String getPrefix(String guildId) {
    	try (final PreparedStatement preparedStatement = SQLiteDataSource.getConnection()
    			// language=SQLite
    			.prepareStatement("SELECT prefix FROM guild_settings WHERE guild_id = ?")) {
    		
    		preparedStatement.setString(1, guildId);
    		
    		try (final ResultSet resultSet = preparedStatement.executeQuery()) {
    			if (resultSet.next()) {
    				return resultSet.getString("prefix");
    			}
    		}
    		
    		try (final PreparedStatement insertStatement = SQLiteDataSource.getConnection()
    				// language=SQLite
    				.prepareStatement("INSERT INTO guild_settings(guild_id) VALUES(?)")) {
    			
    			insertStatement.setString(1, guildId);
    			
    			insertStatement.execute();
    			
    		}
    		
    	} catch (SQLException e) {
    		
    	}
    	return "o!";
    }


}


    <dependency>
        <groupId>com.zaxxer</groupId>
        <artifactId>HikariCP</artifactId>
        <version>3.4.2</version>
    </dependency>
<dependency>
  <groupId>org.xerial</groupId>
  <artifactId>sqlite-jdbc</artifactId>
  <version>3.30.1</version>
</dependency>